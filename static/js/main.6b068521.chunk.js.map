{"version":3,"sources":["App.css","components/Header/Header.css","components/StatusBar/StatusBar.css","components/Screens/DltLogsViewer/DltLogsViewer.css","components/Header/Header.jsx","components/StatusBar/StatusBar.jsx","components/Screens/DltLogLoader/DltLogLoader.jsx","components/Screens/DltLogsViewer/DltLogsViewer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Header","StatusBar","DltLogsViewer","internalClasses","classes","react_default","a","createElement","className","join","Log","props","Object","classCallCheck","this","count","date","time","msFromStartUp","wtf1","projectName","dltAppId","dltCtx","wtf2","wtf3","type","mode","wtf4","message","DltLogLoader","_this","possibleConstructorReturn","getPrototypeOf","call","state","logs","setLogs","bind","assertThisInitialized","generate","setState","parsedLogs","lines","split","line","parts","logObj","splice","length","push","onLogsChangeHandler","_this2","value","onChange","e","target","name","id","cols","rows","onClick","React","Component","console","log","style","height","maxHeight","overflow","border","top","concat","position","Block","width","title","children","applicationLogs","map","obj","gName","html","group","DltLogsViewer_Log","DltLogsViewer_Block","waitLogs","components_Header_Header","Screens_DltLogLoader_DltLogLoader","Screens_DltLogsViewer_DltLogsViewer","components_StatusBar_StatusBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b068521.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_1o-FpbQrR11SDFN-G7O4U3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"oE2FHo7cZNlt-AhRCtIz3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBar\":\"_3EeJdNaFlDNPhXTT3h_GUJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DltLogsViewer\":\"_3h396Gs-cL24ohYXwZkctS\"};","import React from 'react';\nimport classes from './Header.css';\n\n\nconst Header = () => {\n  const internalClasses = [classes.Header, 'col-xs-12', 'col-sm-12', 'col-md-12', 'col-lg-12'];\n\n  return <div className={internalClasses.join(' ')}>\n  </div>\n};\n\nexport default Header;\n","import React from 'react';\nimport classes from './StatusBar.css';\n\n\nconst StatusBar = () => {\n  return <div className={classes.StatusBar}>\n\n  </div>\n};\n\nexport default StatusBar;\n","import React from 'react';\nimport classes from './DltLogLoader.css';\n\nconst glogs = `\n0 2018/10/13 10:48:10.624763 43.4105 21 MIB3 SWDL LUC 1104 log info verbose 1 [0xb6f23390] [SWUP-LUC] register info (p2=0, ip2=0): device = 'lang_device' sw_module_name[0] = '' version = 0.0.0\n1 2018/10/13 10:48:10.624858 43.4106 22 MIB3 SWDL LUC 1104 log info verbose 1 [0xb6f23390] [SWUP-LUC] register info (p2=0, ip2=0): device = 'lang_device' sw_module_name[1] = '' version = 0.0.0\n2 2018/10/13 10:48:10.624936 43.4106 23 MIB3 SWDL LUC 1104 log info verbose 1 [0xb6f23390] [SWUP-LUC] register info (p2=0, ip2=0): device = 'lang_device' sw_module_name[2] = '' version = 0.0.0\n3 2018/10/13 10:48:10.625013 43.4107 28 MIB3 SWDL SWUM 1125 log info verbose 1 [0xb31ff450] [Swup][UnixSocketServer] <rcv> group_id=00 cmd_type=00 cmd_id=B9 datalen=355\n4 2018/10/13 10:48:10.625088 43.4108 29 MIB3 SWDL SWUM 1125 log info verbose 1 [0xb31ff450] [SWUP] registration request from 'emmc_device'(modules: 'linux_app.image'(1.49.0)'itron_app.image'(1.50.0)) device\n5 2018/10/13 10:48:10.625164 43.4174 132 MIB3 LNUX SYS 391 log warn verbose 1 Oct 13 09:44:51 buildroot DLT[215]: [ 42.783899]~DLT~ 215~WARNING ~Duplicate registration of ApplicationID: 'SWDL'; registering from PID 1125, existing from PID 1122\n6 2018/10/13 10:48:10.625244 43.4176 133 MIB3 LNUX SYS 391 log info verbose 1 Oct 13 09:44:51 buildroot [funcmng]: ipc_connection_thread. sset\n7 2018/10/13 10:48:10.625322 43.4176 134 MIB3 LNUX SYS 391 log info verbose 1 Oct 13 09:44:51 buildroot [funcmng]: ipc_connection_thread. UPDATEMANAGER_HMI connect call start\n8 2018/10/13 10:48:10.625398 43.4176 135 MIB3 LNUX SYS 391 log info verbose 1 Oct 13 09:44:51 buildroot [funcmng]: ipc_connection_deregister\n`;\n\nclass Log {\n  constructor ( props ) {\n    this.count = props.count;\n    this.date = props.date;\n    this.time = props.time;\n    this.msFromStartUp = props.msFromStartUp;\n    this.wtf1 = props.wtf1;\n    this.projectName = props.projectName;\n    this.dltAppId = props.dltAppId;\n    this.dltCtx = props.dltCtx;\n    this.wtf2 = props.wtf2;\n    this.wtf3 = props.wtf3;\n    this.type = props.type;\n    this.mode = props.mode;\n    this.wtf4 = props.wtf4;\n    this.message = props.message;\n  }\n}\n\nclass DltLogLoader extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      logs: \"\"\n    };\n\n    this.setLogs = this.setLogs.bind(this);\n    this.generate = this.generate.bind(this);\n  }\n\n  setLogs (logs) {\n    this.setState({logs: logs});\n  }\n\n  generate () {\n    const parsedLogs = [];\n    const lines = this.state.logs.split('\\n');\n    for (const line in lines) {\n      if ( lines[line] ) {\n        const parts = lines[line].split(' ');\n        const logObj = new Log({\n          count: parts[0],          // 0\n          date: parts[1],           // 2018/10/13\n          time: parts[2],           // 10:48:10.624763\n          msFromStartUp: parts[3],  // 43.4105\n          wtf1: parts[4],           // 21\n          projectName: parts[5],    // MIB3\n          dltAppId: parts[6],       // SWDL\n          dltCtx: parts[7],         // LUC\n          wtf2: parts[7],           // 1104\n          wtf3: parts[8],           // log\n          type: parts[9],           // info\n          mode: parts[10],          // verbose\n          wtf4: parts[10],          // 1\n          message: parts.splice(13, parts.length).join(' '),  // super log string with many spaces\n        });\n        parsedLogs.push( logObj );\n      }\n    }\n\n    this.props.onLogsChangeHandler(parsedLogs);\n  }\n\n  render () {\n    return <div className={classes.DltLogLoader}>\n    <textarea\n      value={this.state.logs}\n      onChange={e => this.setLogs(e.target.value)}\n      name=\"dltLogs\"\n      id=\"dltLogs\"\n      cols=\"1000\"\n      rows=\"1000000\" />\n\n      <button onClick={this.generate}>Generate</button>\n    </div>\n  }\n}\n\nexport default DltLogLoader;\n","import React from 'react';\nimport classes from './DltLogsViewer.css';\n\nconst Log = (props) => {\n  console.log(props.log);\n\n  return (<div style={{\n    height: \"40px\",\n    maxHeight: \"40px\",\n    overflow: \"hidden\",\n    border: \"1px solid #eee\",\n    top: `${props.log.count * 40}px`,\n    position: \"absolute\"\n  }}>\n    <b>{props.log.count}</b>: {props.log.message}\n  </div>);\n};\n\nconst Block = (props) => {\n  return (<div style={{border: \"1px solid #eee\", width: \"600px\", height: \"100%\"}}>\n    <h2>{props.title}</h2>\n    <div style={{position: \"relative\", width: \"100%\", height: \"100%\"}}>\n      {props.children}\n    </div>\n  </div>);\n};\n\n\nconst DltLogsViewer = (props) => {\n  const applicationLogs = {};\n  props.logs.map((obj) => {\n    const gName = `${obj.dltAppId}: ${obj.dltCtx}`;\n\n    if ( ! (gName in applicationLogs) ) {\n      applicationLogs[gName] = [];\n    }\n    applicationLogs[gName].push( obj );\n  });\n\n  const html = [];\n  for (const group in applicationLogs) {\n    const logs = [];\n\n    for (const log in applicationLogs[group]) {\n      logs.push(<Log log={applicationLogs[group][log]} />)\n    }\n\n    html.push(<Block title={group}>{logs}</Block>);\n  }\n\n  return <div className={classes.DltLogsViewer}>\n    {html}\n  </div>\n};\n\nexport default DltLogsViewer;\n","import React, { Component } from 'react';\nimport classes from './App.css';\nimport Header from './components/Header/Header';\nimport StatusBar from './components/StatusBar/StatusBar';\nimport DltLogLoader from './components/Screens/DltLogLoader/DltLogLoader';\nimport DltLogsViewer from './components/Screens/DltLogsViewer/DltLogsViewer';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      waitLogs: true,\n      logs: [],\n    };\n\n    this.setLogs = this.setLogs.bind(this);\n  }\n\n  setLogs (logs) {\n    this.setState({logs: logs, waitLogs: false});\n  }\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <Header />\n\n        { this.state.waitLogs ? \n          <DltLogLoader onLogsChangeHandler={this.setLogs} /> : <DltLogsViewer logs={this.state.logs} /> }\n          \n        <StatusBar />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}